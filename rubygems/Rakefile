# Rakefile for RubyGems      -*- ruby -*-

require 'rubygems'
require 'rake/clean'
require 'rake/testtask'
require 'rake/packagetask'
require 'rake/gempackagetask'
require 'rake/rdoctask'

PKG_NAME = 'rubygems'
PKG_VERSION = `ruby -Ilib bin/gem environment packageversion`.chomp

CLEAN.include("COMMENTS")
CLOBBER.include(
  "test/data/one/one-*0.0.1.gem",
  "test/temp",
  'test/data/gemhome',
  'test/data/*.gem',
  'scripts/*.wiki',
  'data__',
  'html',
  'pkgs/sources/sources*.gem',
  '.config'
  )

task :default => [:test]

desc "Run unit tests"
task :test do
  test_name = ENV['TEST'] || 'test/test*.rb'
  ruby %{-Ilib -rscripts/runtest -e 'run_tests("#{test_name}", true)'}
end

desc "Run Functional Tests"
task :functional do
  test_name = ENV['TEST'] || 'test/functional.rb'
  ruby %{-Ilib -rscripts/runtest -e 'run_tests("#{test_name}", true)'}
end

desc "Run All Tests"
task :alltests do
  test_name = ENV['TEST'] || 'test/{test,functional}*.rb'
  ruby %{-Ilib -rscripts/runtest -e 'run_tests("#{test_name}", true)'}
end

desc "Run the tests for a build"
task :build_tests do
  html_dir = ENV['TESTRESULTS'] || 'html/tests'
  ruby %{-Ilib scripts/buildtests.rb #{html_dir}}
  open("#{html_dir}/summary.html") do |inf|
    open("#{html_dir}/summary.new", "w") do |outf|
      inf.each do |line|
	if line =~ /td align/
	  line = "    <td align=\"left\">#{Time.now}</td><td align=\"right\">"
	end
	outf.puts line
      end
    end
  end
  mv "#{html_dir}/summary.html", "#{html_dir}/summary.old"
  mv "#{html_dir}/summary.new", "#{html_dir}/summary.html"      
end

# Shortcuts for test targets
task :ft => [:functional]
task :ut => [:test]
task :at => [:alltests]

task :gemtest do
  ruby %{-Ilib -rscripts/runtest -e 'run_tests("test/test_gempaths.rb", true)'}
end

# Creating a release -------------------------------------------------

desc "Make a new release"
task :release => [
  :prerelease,
  :clobber,
  :alltests,
  :update_version,
  :package,
  :tag] do
  puts "Release Complete.  Packages ready to upload."
end

# Validate that everything is ready to go for a release.
task :prerelease do
  # Is a release number supplied?
  unless ENV['REL']
    fail "Usage: rake release REL='x.y.z'"
  end

  # Are all sources checked in?
  # TBD
end

task :update_version => [:prerelease] do
  open("lib/rubygems/rubygems_version.rb", "w") do |f|
    f.puts "# DO NOT EDIT"
    f.puts "# This file is auto-generated by build scripts."
    f.puts "# See:  rake update_version"
    f.puts "module Gem"
    f.puts "  RubyGemsVersion = '#{ENV['REL']}'"
    f.puts "end"
  end
  # TBD: Check-in new version file.
end

task :tag => [:prerelease] do
  # TBD: Generate a tag.
  reltag = "REL_#{ENV['REL'].gsub(/\./, '_')}"
  puts "TAGGING #{reltag}"
end

# Create a task to build the RDOC documentation tree. ----------------

desc "Create the RDOC html files"
rd = Rake::RDocTask.new("rdoc") { |rdoc|
  rdoc.rdoc_dir = 'html'
#  rdoc.template = 'kilmer'
#  rdoc.template = 'css2'
  rdoc.template = 'jamis'
  rdoc.title    = "RubyGems"
  rdoc.options << '--line-numbers' << '--inline-source' << '--main' << 'README'
  rdoc.rdoc_files.include('README', 'TODO', 'Releases')
  rdoc.rdoc_files.include('lib/**/*.rb')
  rdoc.rdoc_files.include('test/**/*.rb')
}

file "html/index.html" => [:rdoc]

desc "Publish the RDOCs on RubyForge"
task :publish_rdoc => ["html/index.html"] do
  # NOTE: This task assumes that you have an SSH alias setup for rubyforge.
  mkdir_p "emptydir"
  sh "scp -rq emptydir rubyforge:/var/www/gforge-projects/rubygems/rdoc"
  sh "scp -rq html/* rubyforge:/var/www/gforge-projects/rubygems/rdoc"
  rm_r "emptydir"
end

# Wiki Doc Targets

desc "Build the Wiki documentation"
task :wiki => ['scripts/gemdoc.wiki', 'scripts/specdoc.wiki']

file 'scripts/gemdoc.wiki' => ['scripts/gemdoc.rb', 'scripts/gemdoc.data'] do
  chdir('scripts') do
    ruby %{-I../lib gemdoc.rb <gemdoc.data >gemdoc.wiki}
  end
end

file 'scripts/specdoc.wiki' =>
  ['scripts/specdoc.rb', 'scripts/specdoc.data', 'scripts/specdoc.yaml'] do
  chdir('scripts') do
    ruby %{-I../lib specdoc.rb >specdoc.wiki}
  end
end

# Package tasks

PKG_FILES = FileList[
  "Rakefile", "ChangeLog", "Releases", "TODO", "README", 
  "setup.rb",
  "bin/*",
  "doc/*.css", "doc/*.rb",
  "examples/**/*",
  "gemspecs/**/*",
  "lib/**/*.rb",
  "pkgs/**/*",
  "redist/*.gem",
  "scripts/*.rb",
  "test/**/*"
]
PKG_FILES.exclude(%r(^test/temp(/|$)))

Rake::PackageTask.new("package") do |p|
  p.name = PKG_NAME
  p.version = PKG_VERSION
  p.need_tar = true
  p.need_zip = true
  p.package_files = PKG_FILES
end

spec = Gem::Specification.new do |s|
  s.name = PKG_NAME + "-update"  
  s.version = PKG_VERSION
  s.summary = "RubyGems Update GEM"
  s.description = %{RubyGems is a package management framework for Ruby.  This Gem
is a update for the base RubyGems software.  You must have a base
installation of RubyGems before this update can be applied.
}
  s.files = PKG_FILES.to_a
  s.require_path = 'lib'
  s.author = "RubyGems Team"
  s.email = "rubygems-developers@rubyforge.org"
  s.homepage = "http://rubygems.rubyforge.org"
  s.rubyforge_project = "rubygems"
  s.bindir = "bin"                               # Use these for applications.
  s.executables = ["update_rubygems"]
end

Rake::GemPackageTask.new(spec) do |p| end

# Install RubyGems

desc "Install RubyGems"
task :install do
  ruby 'install.rb'
end

# Run 'gem' (using local bin and lib directories).
# e.g.
#     rake rungem -- install -r blahblah --test

desc "Run local 'gem'"
task :rungem do
  ARGV.shift
  exec "ruby -Ilib bin/gem #{ARGV.join(' ')}"
end

# Misc Tasks ---------------------------------------------------------

def egrep(pattern)
  Dir['**/*.rb'].each do |fn|
    count = 0
    open(fn) do |f|
      while line = f.gets
	count += 1
	if line =~ pattern
	  puts "#{fn}:#{count}:#{line}"
	end
      end
    end
  end
end

desc "Look for TODO and FIXME tags in the code"
task :todo do
  egrep /#.*(FIXME|TODO|TBD)/
end

desc "Look for Debugging print lines"
task :dbg do
  egrep /\bDBG|\bbreakpoint\b/
end

desc "List all ruby files"
task :rubyfiles do 
  puts Dir['**/*.rb'].reject { |fn| fn =~ /^pkg/ }
  puts Dir['bin/*'].reject { |fn| fn =~ /CVS|(~$)|(\.rb$)/ }
end
