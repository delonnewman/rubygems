#!/usr/bin/env ruby

require 'optparse'

options = {}
ARGV.options do |opts|
  opts.on_tail("--help", "show this message") {puts opts; exit}
  opts.on('-bGEMSPEC','--build=GEMSPEC', "Build a gem file from spec") { |options[:gemspec]| }
  opts.on('-iGEMFILE', '--install=GEMFILE', "Install a gem from local gem file")    {|options[:install]|}
  opts.on('-uGEMNAME', '--uninstall=GEMNAME', "Uninstall a previously installed gem") {|options[:uninstall]|}
  opts.on('--info=GEMNAME', "Display details about an installed Gem") {|options[:info]|}
  opts.on('--dir=DIRNAME', "Installation directory for the Gem") {|options[:directory]|}
  opts.on('--gen-rdoc', "Generate RDoc documentation for the Gem") {|options[:gen_rdoc]|}
  opts.on('--list', "List installed Gems") {|options[:list]|}
  opts.on('--search=SEARCHPATTERN', "Search for Gems in the remote repository") {|options[:search]|}
  opts.on('--force', "Force Gem to intall, bypassing dependency checks") {|options[:force]|}
  opts.on('--remote-install=GEMNAME', "Auto-download and install a Gem and its dependencies") {|options[:remote_install]|}
  opts.on('--http-proxy=HTTPPROXYHOST', "(unimplemented) HTTP Proxy to use for remote operations") {|options[:remote_install]|}
  opts.on('--version=GEMVERSION', "Version of Gem to perform operation on") {|options[:gem_version]|}
  opts.on('--verify=GEMFILE', "Verify Gem file against its internal checksum") {|options[:verify_gem]|}
  opts.on('--alien', "Report 'unmanaged' or rogue files in the Gem repository") {options[:alien] = true}
  opts.parse!
end

require 'rubygems'

spec_file = options[:build]
install_file = options[:install]
gem_to_uninstall = options[:uninstall]
gem_to_search_for = options[:search]
info = options[:info]
list = options[:list]
force = options[:force]
gen_rdoc = options[:gen_rdoc]
remote_install = options[:remote_install]
directory = options[:directory] || Gem.dir
verify_gem = options[:verify_gem]
alien = options[:alien]

installed_gems = []

if spec_file
  load spec_file
  Gem::Specification.list.each do |spec|
    Gem::Builder.new(spec).build
  end
end

if install_file
  unless File.exist?(install_file)
    if File.exist?(install_file+".gem")
      install_file = install_file+".gem"
    else
      $stderr.puts "Unknown gem file #{install_file}"
    end
  end
  installer = Gem::Installer.new(install_file)
  begin
    installed_gems << installer.install(force, directory)
  rescue => e
    $stderr.puts "Error installing #{install_file}: #{e.message}"
  end
end

if gem_to_search_for
  installer = Gem::RemoteInstaller.new
  gems = installer.search(gem_to_search_for)
  gems.each do |gem|
    puts gem[0]
  end
end

if remote_install
  installed_gems = Gem::RemoteInstaller.new.install(remote_install, options[:gem_version] || "> 0.0.0")
end

if gem_to_uninstall
  Gem::Uninstaller.new.uninstall(gem_to_uninstall, options[:gem_version] || "> 0.0.0")
end

if info
  gem_specs = Gem::Cache.from_installed_gems.search(info, options[:gem_version] || "> 0.0.0")
  if gem_specs.size > 0
    require 'yaml'
    gem_specs.each {|spec| puts spec.to_yaml; puts "\n"}
  else
    $stderr.puts "Unkown gem #{info}"
  end
end

if list
  Gem::Cache.from_installed_gems.each do |gem_name, gem_spec|
    puts gem_name
  end
end

if verify_gem
  begin
    Gem::Validator.new.verify_gem(verify_gem)
  rescue => e
    $stderr.puts "#{verify_gem} is invalid"
  end
end

if gen_rdoc
  installed_gems.each do |gem|
    Gem::DocManager.new(gem).generate_rdoc
  end
end

if alien
  Gem::Validator.new.alien
end
