#!/usr/bin/env ruby

require 'optparse'

options = {}
ARGV.options do |opts|
  opts.banner = <<BANNER

'gem' is the user interface to RubyGems, the Ruby package manager.
  
    Usage: gem <action> [modifier ...]"
BANNER
  opts.separator("")
  opts.separator("Actions:")
  opts.separator("")
  opts.separator("  Install:")
  opts.on('-i', '--install GEMFILE', "Install a gem from local gem file")    {|options[:install]|}
  opts.on('-u', '--uninstall GEMNAME', "Uninstall a previously installed gem") {|options[:uninstall]|}
  opts.on('-r', '--remote-install GEMNAME', "Auto-download and install a gem and its dependencies") {|options[:remote_install]|}
  opts.separator("")
  opts.separator("  Build:")
  opts.on('-b', '--build GEMSPEC', "Build a gem file from spec") { |options[:gemspec]| }
  opts.separator("")
  opts.separator("  Query:")
  opts.on('-l', '--list', "List installed gems") {|options[:list]|}
  opts.on('-s', '--search SEARCHPATTERN', "Search for gems in the remote repository") {|options[:search]|}
  opts.on('--info GEMNAME', "Display details about an installed gem") {|options[:info]|}
  opts.on('--remote-list', "List all gems in the remote repository") {|options[:remote_list]|}
  opts.separator("")
  opts.separator("  Miscellaneous:")
  opts.on('--alien', "Report 'unmanaged' or rogue files in the gem repository") {options[:alien] = true}
  opts.on('--verify GEMFILE', "Verify gem file against its internal checksum") {|options[:verify_gem]|}
  opts.separator("")
  opts.separator("Modifiers:")
  opts.on('--dir DIRNAME', "Installation directory for the gem") {|options[:directory]|}
  opts.on('--force', "Force gem to intall, bypassing dependency checks") {|options[:force]|}
  opts.on('--gen-rdoc', "Generate RDoc documentation for the gem") {|options[:gen_rdoc]|}
  opts.on('--run-tests', "Run unit tests prior to installation") {|options[:run_tests]|}
  opts.on('--http-proxy HTTPPROXYHOST', "(unimplemented) HTTP Proxy to use for remote operations") {|options[:http_proxy]|}
  opts.on('--version GEMVERSION', "Version of gem to perform operation on") {|options[:gem_version]|}
  opts.separator("")
  opts.separator("Miscellaneous:")
  opts.on("--help", "show this message") {puts opts; exit}
  opts.parse!
end

require 'rubygems'

def get_remote_installer(options)
  Gem::RemoteInstaller.new(options[:http_proxy])
end

def run_tests(name, version)
  gem_specs = Gem::Cache.from_installed_gems.search(name, version.version)
  require_gem name, "= #{version.version}"
  require gem_specs[0].test_suite_file
  suite = Test::Unit::TestSuite.new("#{name}-#{version}")
  ObjectSpace.each_object(Class) do |klass|
    suite << klass.suite if (Test::Unit::TestCase > klass)
  end
  require 'test/unit/ui/console/testrunner'
  result = Test::Unit::UI::Console::TestRunner.run(suite, Test::Unit::UI::SILENT)
  unless(result.passed?)
    print result.to_s + "...remove Gem? [y/N] "
    answer = gets
    if(answer =~ /^y/i) then
      Gem::Uninstaller.new(name, version.version).uninstall
    end
  end
end

def display_gems(gems)
  gems.sort {|a,b| 
    a[0].downcase <=> b[0].downcase
  }.each do |gem|
    puts "#{gem[0]} - #{gem[1].summary}"
    puts 
  end
end

spec_file = options[:build]
install_file = options[:install]
gem_to_uninstall = options[:uninstall]
gem_to_search_for = options[:search]
info = options[:info]
list = options[:list]
force = options[:force]
gen_rdoc = options[:gen_rdoc]
remote_install = options[:remote_install]
directory = options[:directory] || Gem.dir
verify_gem = options[:verify_gem]
alien = options[:alien]

installed_gems = []

if spec_file
  load spec_file
  Gem::Specification.list.each do |spec|
    Gem::Builder.new(spec).build
  end
end

if install_file
  unless File.exist?(install_file)
    if File.exist?(install_file+".gem")
      install_file = install_file+".gem"
    else
      $stderr.puts "Unknown gem file #{install_file}"
    end
  end
  installer = Gem::Installer.new(install_file)
  begin
    installed_gems << installer.install(force, directory)
  rescue => e
    $stderr.puts "Error installing gem #{install_file}: #{e.message}"
  end
  if options[:run_tests]
    run_tests(installed_gems[0].name, installed_gems[0].version)
  end
end

if options[:remote_list]
  installer = get_remote_installer(options)
  display_gems(installer.search(//))
end

if gem_to_search_for
  installer = get_remote_installer(options)
  gems = installer.search(gem_to_search_for)
  display_gems(gems)
end

if remote_install
  begin
    installer = get_remote_installer(options)
    installed_gems << installer.install(remote_install, options[:gem_version] || "> 0.0.0", force, directory)
  rescue => e
    $stderr.puts "Error installing gem #{remote_install}: #{e.message}"
    exit(2)
  end
  if options[:run_tests]
    cache_dir = File.join(Gem::dir, "cache")
    destination_file = File.join(cache_dir, installed_gems[0].full_name + ".gem")
    run_tests(installed_gems[0].name, installed_gems[0].version)
  end
end

if gem_to_uninstall
  Gem::Uninstaller.new(gem_to_uninstall, options[:gem_version] || "> 0.0.0").uninstall
end

if info
  gem_specs = Gem::Cache.from_installed_gems.search(info, options[:gem_version] || "> 0.0.0")
  if gem_specs.size > 0
    require 'yaml'
    gem_specs.each {|spec| puts spec.to_yaml; puts "\n"}
  else
    $stderr.puts "Unkown gem #{info}"
  end
end

if list
  gemlist = []
  Gem::Cache.from_installed_gems.each {|name, spec|
    gemlist << [name, spec]
  }
  display_gems(gemlist)
end

if verify_gem
  begin
    Gem::Validator.new.verify_gem(verify_gem)
  rescue => e
    $stderr.puts "#{verify_gem} is invalid"
  end
end

if gen_rdoc
  installed_gems.each do |gem|
    Gem::DocManager.new(gem).generate_rdoc
  end
end

if alien
  Gem::Validator.new.alien
end

