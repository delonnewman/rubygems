#!/usr/bin/env ruby

require 'optparse'

options = {}
ARGV.options do |opts|
  opts.on_tail("--help", "show this message") {puts opts; exit}
  opts.on('-bGEMSPEC','--build=GEMSPEC', "Build a gem file from spec") { |options[:gemspec]| }
  opts.on('-iGEMFILE', '--install=GEMFILE', "Install a gem from local gem file")    {|options[:install]|}
  opts.on('-uGEMNAME', '--uninstall=GEMNAME', "Uninstall a previously installed gem") {|options[:uninstall]|}
  opts.on('--info=GEMNAME', "Display details about an installed Gem") {|options[:info]|}
  opts.on('--dir=DIRNAME', "Installation directory for the Gem") {|options[:directory]|}
  opts.on('--list', "List installed Gems") {|options[:list]|}
  opts.on('--force', "Force Gem to intall, bypassing dependency checks") {|options[:force]|}
  opts.on('--remote-install=GEMNAME', "Auto-download and install a Gem and its dependencies") {|options[:remote_install]|}
  opts.on('--http-proxy=HTTPPROXYHOST', "(unimplemented) HTTP Proxy to use for remote operations") {|options[:remote_install]|}
  opts.on('--version=GEMVERSION', "Version of Gem to perform operation on") {|options[:gem_version]|}
  opts.on('--verify=GEMFILE', "Verify gem file against its internal checksum") {|options[:verify_gem]|}
  opts.on('--alien', "Report 'unmanaged' or rogue files in the gem repository") {options[:alien] = true}
  opts.parse!
end

require 'rubygems'
@spec_file = options[:build]
@install_file = options[:install]
@gem = options[:uninstall]
@info = options[:info]
@list = options[:list]
@force = options[:force]
@remote_install = options[:remote_install]
@directory = options[:directory] || Gem.dir
@verify_gem = options[:verify_gem]
@alien = options[:alien]

if @spec_file
  load @spec_file
  Gem::Specification.list.each do |spec|
    Gem::Builder.new(spec).build
  end
end

if @install_file
  unless File.exist?(@install_file)
    if File.exist?(@install_file+".gem")
      @install_file = @install_file+".gem"
    else
      puts "Unknown gem file #{@install_file}"
    end
  end
  installer = Gem::Installer.new(@install_file)
  begin
    installer.install(@force, @directory)
  rescue => e
    puts "Error installing #{@install_file}: #{e.message}"
  end
end

if @gem
  Gem::Uninstaller.new(@gem, options[:gem_version] || "> 0.0.0").uninstall
end

if @info
  gem_specs = Gem::Cache.from_installed_gems.search(@info, options[:gem_version] || "> 0.0.0")
  if gem_specs.size > 0
    require 'yaml'
    gem_specs.each {|spec| puts spec.to_yaml; puts "\n"}
  else
    puts "Unkown gem #{@info}"
  end
end

if @list
  Gem::Cache.from_installed_gems.each do |gem_name, gem_spec|
    puts gem_name
  end
end

if @remote_install
  Gem::RemoteInstaller.new(@remote_install, options[:gem_version] || "> 0.0.0").install
end

if @verify_gem
  begin
    Gem::Validator.new.verify_gem(File.read(@verify_gem)) 
    puts "#{@verify_gem} is valid"
  rescue => e
    puts "#{@verify_gem} is invalid"
  end
end

def display_alien_report(errors)
  errors.each do |key, val|
    if(val.size > 0) then 
      puts "#{key} has #{val.size} problems"
    else 
      puts "#{key} is error-free"
    end
    val.each do |error_entry|
      puts "\t#{error_entry.path}:"
      puts "\t#{error_entry.problem}"
      puts
    end
    puts
  end
end

def find_files_for_gem(gem_directory)
  installed_files = []
  Find.find(gem_directory) {|file_name|
    file_name.slice!((gem_directory.size)..(file_name.size-1)).sub(/^\//, "")
    Find.prune if (file_name =~ /CVS/ || File.directory?(file_name) || file_name == "")
    installed_files << file_name
  }
  installed_files
end

if @alien
  Gem::Validator.new.alien
end
